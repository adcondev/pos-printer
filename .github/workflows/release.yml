name: Release

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'chore(release)') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[skip release]')

    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
        continue-on-error: true

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
          npm install -g standard-version@latest
          npm install -g @commitlint/cli@latest @commitlint/config-conventional@latest

      - name: Analyze commits
        id: analyze
        run: |
          # Get the latest tag; if no tag exists, fallback to "v0.0.0"
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Determine commit count based on whether a valid tag exists.
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMIT_COUNT=$(git rev-list HEAD --count)
          else
            COMMIT_COUNT=$(git rev-list ${LATEST_TAG}..HEAD --count)
          fi
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "No new commits since $LATEST_TAG"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Analyze commit messages - handle differently if no tags exist
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
          fi

          # Check for breaking changes
          if echo "$COMMITS" | grep -qE "(BREAKING CHANGE|^[a-z]+(\(.+\))?!:)"; then
            RELEASE_TYPE="major"
          # Check for features
          elif echo "$COMMITS" | grep -q "^feat"; then
            RELEASE_TYPE="minor"
          # Check for fixes or dependency updates
          elif echo "$COMMITS" | grep -qE "^(fix|perf|deps)"; then
            RELEASE_TYPE="patch"
          else
            RELEASE_TYPE=""
          fi

          if [ -n "$RELEASE_TYPE" ]; then
            echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "No releasable changes found"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

          # Generate summary
          echo "## ðŸ“Š Commit Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Latest tag: $LATEST_TAG" >> $GITHUB_STEP_SUMMARY
          echo "- Commits since last release: $COMMIT_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Release needed: $([[ $(grep 'should_release=' $GITHUB_OUTPUT | head -n1) =~ true ]] && echo "true" || echo "false")" >> $GITHUB_STEP_SUMMARY
          if [ "$RELEASE_TYPE" != "" ]; then
            echo "- Release type: $RELEASE_TYPE" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create Release
        if: steps.analyze.outputs.should_release == 'true'
        id: release
        run: |
          # Run standard-version
          standard-version --release-as ${{ steps.analyze.outputs.release_type }}
          
          # Get the new version from package.json
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit and push the changes
          git push --follow-tags origin ${{ github.ref_name }}

      - name: Create GitHub Release
        if: steps.analyze.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release.outputs.new_version }}
          name: Release v${{ steps.release.outputs.new_version }}
          body_path: CHANGELOG.md
          generate_release_notes: false
          make_latest: true